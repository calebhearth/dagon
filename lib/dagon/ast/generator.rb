#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


module Ast
  class Generator < Racc::Parser

module_eval(<<'...end generator.y/module_eval...', 'generator.y', 34)
  attr_accessor :table
  def initialize(tokens)
    @tokens = tokens
  end

  def parse
    @table = do_parse
    self
  end

  def next_token
    tokens.shift
  end

  private
  attr_accessor :tokens
...end generator.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    27,    28,    29,    30,    31,    10,    11,    12,    32,    19,
    18,    10,    11,    12,    10,    11,    12,    15,    18,    16,
    10,    11,    12,    10,    11,    12,    25,   -15,   -12,    15,
    14,    13,    18,    35,    36,    37,    38,    39 ]

racc_action_check = [
    18,    18,    18,    18,    18,     0,     0,     0,    22,    13,
    22,    25,    25,    25,    14,    14,    14,     7,     8,     7,
    15,    15,    15,    17,    17,    17,    16,     6,     4,    21,
     3,     1,    26,    27,    28,    29,    30,    31 ]

racc_action_pointer = [
    -7,    31,   nil,    28,    22,   nil,    21,    14,    12,   nil,
   nil,   nil,   nil,     9,     2,     8,    20,    11,    -7,   nil,
   nil,    26,     4,   nil,   nil,    -1,    26,    27,    28,    29,
    30,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -24,   -24,    -1,    -4,    -5,    -6,    -7,   -13,   -24,   -14,
   -21,   -22,   -23,   -24,    -3,   -24,   -24,   -24,   -24,    40,
    -2,   -13,   -24,   -12,   -15,   -24,   -11,   -24,   -24,   -24,
   -24,   -24,    -8,    -9,   -10,   -16,   -17,   -18,   -19,   -20 ]

racc_goto_table = [
     2,    21,    23,    21,    23,    22,    24,    26,    24,     1,
    33,    34,   nil,   nil,    20 ]

racc_goto_check = [
     2,     7,     4,     7,     4,     8,     6,     8,     6,     1,
     9,     7,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     9,     0,   nil,   -13,   nil,    -9,   -14,   -10,   -15,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    17 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_1,
  3, 17, :_reduce_2,
  2, 17, :_reduce_3,
  1, 17, :_reduce_4,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  4, 21, :_reduce_8,
  4, 20, :_reduce_9,
  4, 20, :_reduce_10,
  3, 19, :_reduce_11,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  3, 25, :_reduce_16,
  3, 25, :_reduce_17,
  3, 25, :_reduce_18,
  3, 25, :_reduce_19,
  3, 25, :_reduce_20,
  1, 24, :_reduce_21,
  1, 24, :_reduce_22,
  1, 22, :_reduce_23 ]

racc_reduce_n = 24

racc_shift_n = 40

racc_token_table = {
  false => 0,
  :error => 1,
  :NEWLINE => 2,
  :OPEN_PAREN => 3,
  :CLOSE_PAREN => 4,
  ":" => 5,
  " " => 6,
  "+" => 7,
  "-" => 8,
  "*" => 9,
  "/" => 10,
  "**" => 11,
  :FLOAT => 12,
  :INTEGER => 13,
  :IDENTIFIER => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEWLINE",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "\":\"",
  "\" \"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"**\"",
  "FLOAT",
  "INTEGER",
  "IDENTIFIER",
  "$start",
  "target",
  "program",
  "statement",
  "expression",
  "assignment",
  "method_call",
  "identifier",
  "expressable",
  "literal",
  "logical" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'generator.y', 2)
  def _reduce_1(val, _values, result)
     result = [:program, val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 4)
  def _reduce_2(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 5)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 6)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'generator.y', 10)
  def _reduce_8(val, _values, result)
     result = [:call, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 12)
  def _reduce_9(val, _values, result)
     result = [:assignment, val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 13)
  def _reduce_10(val, _values, result)
     result = [:assignment, val[0], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 15)
  def _reduce_11(val, _values, result)
     result = [val[1], val[0], val[2]] 
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'generator.y', 19)
  def _reduce_16(val, _values, result)
     result = :addition 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 20)
  def _reduce_17(val, _values, result)
     result = :subtraction 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 21)
  def _reduce_18(val, _values, result)
     result = :multiplication 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 22)
  def _reduce_19(val, _values, result)
     result = :division 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 23)
  def _reduce_20(val, _values, result)
     result = :exponentiation 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 25)
  def _reduce_21(val, _values, result)
     result = [:float, val[0].to_f] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 26)
  def _reduce_22(val, _values, result)
     result = [:integer, val[0].to_i] 
    result
  end
.,.,

module_eval(<<'.,.,', 'generator.y', 28)
  def _reduce_23(val, _values, result)
     result = [:identifier, val[0]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Generator
  end   # module Ast
